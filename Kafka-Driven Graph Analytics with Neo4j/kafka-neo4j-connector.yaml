apiVersion: v1
kind: Service
metadata:
  name: kafka-connect-service
spec:
  selector:
    app: kafka-connect
  ports:
    - protocol: TCP
      port: 8083  # Kafka Connect REST API port
      targetPort: 8083
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-connect-deployment
  labels:
    app: kafka-connect
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-connect
  template:
    metadata:
      labels:
        app: kafka-connect
    spec:
      containers:
        - name: kafka-connect
          image: veedata/kafka-neo4j-connect:latest2 # Custom image with Neo4j Kafka connector
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8083  # Kafka Connect REST API port
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
          env:
            - name: CONNECT_BOOTSTRAP_SERVERS
              value: "kafka-service:29092" # Replace 'kafka-broker' with the actual Kafka broker service name




# apiVersion: v1
# kind: Service
# metadata:
#   name: kafka-connect-service
# spec:
#   selector:
#     app: kafka-connect
#   ports:
#     - protocol: TCP
#       port: 8083  # Kafka Connect REST API port
#       targetPort: 8083
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: kafka-connect-deployment
#   labels:
#     app: kafka-connect
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: kafka-connect
#   template:
#     metadata:
#       labels:
#         app: kafka-connect
#     spec:
#       containers:
#         - name: kafka-connect
#           image: veedata/kafka-neo4j-connect  # Custom image with Neo4j Kafka connector
#           imagePullPolicy: Always
#           ports:
#             - containerPort: 8083  # Kafka Connect REST API port
#           resources:
#             limits:
#               memory: "1000Mi"
#               cpu: "1000m"
#           volumeMounts:
#             - name: neo4j-sink-config
#               mountPath: /home/appuser/sink.neo4j.json  # Mounting the file in the container at this path
#               subPath: sink.neo4j.json  # Only this specific file will be mounted
#       volumes:
#         - name: neo4j-sink-config
#           configMap:
#             name: neo4j-sink-config  # The ConfigMap that contains the sink.neo4j.json file
# #   # Ensure this ConfigMap exists and contains the correct file

# #  kubectl create configmap neo4j-sink-config --from-file=sink.neo4j.json

# apiVersion: v1
# kind: Service
# metadata:
#   name: kafka-connect-service
# spec:
#   selector:
#     app: kafka-connect
#   ports:
#     - protocol: TCP
#       port: 8083  # Kafka Connect REST API port
#       targetPort: 8083
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: kafka-connect-deployment
#   labels:
#     app: kafka-connect
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: kafka-connect
#   template:
#     metadata:
#       labels:
#         app: kafka-connect
#     spec:
#       containers:
#         - name: kafka-connect
#           image: veedata/kafka-neo4j-connect  # Custom image with Neo4j Kafka connector
#           imagePullPolicy: Always
#           ports:
#             - containerPort: 8083  # Kafka Connect REST API port
#           resources:
#             limits:
#               memory: "1000Mi"
#               cpu: "1000m"
#           volumeMounts:
#             - name: neo4j-sink-config
#               mountPath: /home/appuser/sink.neo4j.json  # Mounting the file in the container at this path
#               subPath: sink.neo4j.json  # Only this specific file will be mounted
#       volumes:
#         - name: neo4j-sink-config
#           configMap:
#             name: neo4j-sink-config  # The ConfigMap that contains the sink.neo4j.json file
# #   # Ensure this ConfigMap exists and contains the correct file

# #  kubectl create configmap neo4j-sink-config --from-file=sink.neo4j.json

# apiVersion: v1
# kind: Service
# metadata:
#   name: kafka-connect-service
# spec:
#   selector:
#     app: kafka-connect
#   ports:
#     - protocol: TCP
#       port: 8083  # Kafka Connect REST API port
#       targetPort: 8083
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: neo4j-sink-config
# data:
#   sink.neo4j.json: |
#     {
#       "name": "Neo4jSinkConnectorJSONString",
#       "config": {
#         "topics": "nyc_taxicab_data",
#         "connector.class": "streams.kafka.connect.sink.Neo4jSinkConnector",
#         "key.converter": "org.apache.kafka.connect.json.JsonConverter",
#         "key.converter.schemas.enable": false,
#         "value.converter": "org.apache.kafka.connect.json.JsonConverter",
#         "value.converter.schemas.enable": false,
#         "errors.retry.timeout": "-1",
#         "errors.retry.delay.max.ms": "1000",
#         "errors.tolerance": "all",
#         "errors.log.enable": true,
#         "errors.log.include.messages": true,
#         "neo4j.server.uri": "bolt://neo4j-service:7687",
#         "neo4j.authentication.basic.username": "neo4j",
#         "neo4j.authentication.basic.password": "project1phase2",
#         "neo4j.topic.cypher.nyc_taxicab_data": "MERGE (p:Location {name: COALESCE(toInteger(event.PULocationID), -1)}) MERGE (d:Location {name: COALESCE(toInteger(event.DOLocationID), -1)}) CREATE (p)-[:TRIP {distance: COALESCE(toFloat(event.trip_distance), 0.0), fare: COALESCE(toFloat(event.fare_amount), 0.0), pickup_dt: COALESCE(event.tpep_pickup_datetime, ''), dropoff_dt: COALESCE(event.tpep_dropoff_datetime, '')}]->(d)"
#       }
#     }
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: kafka-connect-deployment
#   labels:
#     app: kafka-connect
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: kafka-connect
#   template:
#     metadata:
#       labels:
#         app: kafka-connect
#     spec:
#       containers:
#         - name: kafka-connect
#           image: veedata/kafka-neo4j-connect  # Custom image with Neo4j Kafka connector
#           imagePullPolicy: Always
#           ports:
#             - containerPort: 8083  # Kafka Connect REST API port
#           resources:
#             limits:
#               memory: "1000Mi"
#               cpu: "1000m"
#           volumeMounts:
#             - name: neo4j-sink-config
#               mountPath: /home/appuser/sink.neo4j.json  # Mounting the file in the container at this path
#               subPath: sink.neo4j.json  # Only this specific file will be mounted
#       volumes:
#         - name: neo4j-sink-config
#           configMap:
#             name: neo4j-sink-config